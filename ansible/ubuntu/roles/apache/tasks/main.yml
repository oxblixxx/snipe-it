---

#Install Apache Web Server
- name: Install Apache 2.4
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - apache2
    
- name: Start and Enable Apache2 Server
  systemd:
    name: apache2
    state: started
    enabled: yes

- name: Enable Apache modules
  apache2_module:
    state: present
    name: "{{ item }}"
  with_items:
    - rewrite
    - vhost_alias
    - deflate
    - expires
    - proxy_fcgi
    - proxy
  notify:
    - restart apache2
   
- name: Install Apache VirtualHost File
  copy:
    src: "../files/apachevirtualhost.conf.j2"
    dest: "/etc/apache2/sites-available/snipeit.conf"
   
- name: Enable VirtualHost
  command: a2ensite snipeit
  args:
    creates: /etc/apache2/sites-enabled/snipeit.conf
  notify:
    - restart apache2
   
- name: Composer check
  stat:
    path: /usr/local/bin/composer
  register: composer_exits

- name: Install Composer
  shell: |
    EXPECTED_SIGNATURE=$(wget -q -O - https://composer.github.io/installer.sig)
      php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

      if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
      then
          >&2 echo 'ERROR: Invalid installer signature'
          rm composer-setup.php
          exit 1
      fi

      php composer-setup.php --quiet
      RESULT=$?
      rm composer-setup.php
      mv composer.phar /usr/local/bin/composer
      exit $RESULT
  when: not composer_exits.stat.exists
  args:
    creates: /usr/local/bin/composer
    
- name: change file permissions
  tags: file_permission
  file:
    path: /var/www/snipe-it/
    owner: ubuntu
    group: www-data
    mode: 0770
    modification_time: now      
    recurse: yes




# Install dependencies from composer
- name: Install dependencies from composer
  become_user: ubuntu
  vars:
    app_path: "/var/www/snipe-it" 
  composer:
    command: install 
    working_dir: "{{ app_path }}"


# Configure .env file    
- name: Copy .env file
  vars:
    app_path: "/var/www/snipe-it" 
  copy:
    src: "{{ app_path }}/.env.example"
    dest: "{{ app_path }}/.env"
    remote_src: true
    
- name: Configure .env file
  vars:
    app_path: "/var/www/snipe-it" 
    fqdn: "54.236.29.139"
  lineinfile:
    path: "{{ vars.app_path }}/.env"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^DB_HOST=', line: 'DB_HOST=127.0.0.1'}
    - { regexp: '^DB_DATABASE=', line: 'DB_DATABASE=snipeit' }
    - { regexp: '^DB_USERNAME=', line: 'DB_USERNAME=oxblixxx' }
    - { regexp: '^DB_PASSWORD=', line: 'DB_PASSWORD=oxblixxx' }
    - { regexp: '^APP_URL=', line: "APP_URL=http://{{ fqdn }}" }
    - { regexp: '^APP_ENV=', line: "APP_ENV=development" }
    - { regexp: '^APP_DEBUG=', line: "APP_DEBUG=true" }


#
- name: Generate application key
  vars:
    app_path: "/var/www/snipe-it" 
  shell: "php {{ vars.app_path }}/artisan key:generate --force"
    
- name: Artisan Migrate
  vars:
    app_path: "/var/www/snipe-it" 
  shell: "php {{ app_path }}/artisan migrate --force"
    #
    # Create Cron Job
    #
- name: Create scheduler cron job
  vars:
    app_path: "/var/www/snipe-it" 
  cron:
    name: "Snipe-IT Artisan Scheduler"
    job: "/usr/bin/php {{ vars.app_path }}/artisan schedule:run"

- name: restart apache2
  systemd:
    name: apache2
    state: restarted

- name: restart mysql
  systemd:
    name: mysql
    state: restarted



